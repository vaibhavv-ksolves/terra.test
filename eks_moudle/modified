terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }

    helm = {
      source  = "hashicorp/helm"
      version = "~> 2.0"
    }

    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "~> 2.0"
    }
  }

  required_version = ">= 1.3.0"
}

provider "aws" {
  region = var.aws_region
}

# -----------------------------------------------------------------------------
# VPC MODULE
# -----------------------------------------------------------------------------

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "~> 5.1.1"

  name = var.vpc_name
  cidr = var.vpc_cidr
  azs  = var.azs

  public_subnets   = var.public_subnets
  private_subnets  = var.private_subnets
  database_subnets = var.database_subnets

  enable_dns_support   = true
  enable_dns_hostnames = true

  create_igw              = true
  enable_nat_gateway      = true
  single_nat_gateway      = false
  one_nat_gateway_per_az  = true

  manage_default_security_group = false
  manage_default_network_acl    = false

  enable_flow_log = true
  create_flow_log_cloudwatch_log_group = true
  create_flow_log_cloudwatch_iam_role  = true
  flow_log_destination_type = "cloud-watch-logs"

  tags = var.tags
}

# -----------------------------------------------------------------------------
# VPC ENDPOINTS MODULE (Separate)
# -----------------------------------------------------------------------------

module "vpc_endpoints" {
  source  = "terraform-aws-modules/vpc/aws//modules/vpc-endpoints"
  version = "~> 5.1.1"

  vpc_id = module.vpc.vpc_id

  endpoints = {
    s3 = {
      service         = "s3"
      service_type    = "Gateway"
      route_table_ids = module.vpc.private_route_table_ids
      tags = {
        Name = "s3-endpoint"
      }
    }

    dynamodb = {
      service         = "dynamodb"
      service_type    = "Gateway"
      route_table_ids = module.vpc.private_route_table_ids
      tags = {
        Name = "dynamodb-endpoint"
      }
    }
  }

  tags = var.tags
}

# -----------------------------------------------------------------------------
# EKS MODULE
# -----------------------------------------------------------------------------

module "eks" {
  source  = "terraform-aws-modules/eks/aws"
  version = "~> 20.0"

  cluster_name    = var.eks_cluster_name
  cluster_version = var.eks_cluster_version
  cluster_endpoint_public_access = true

  vpc_id     = module.vpc.vpc_id
  subnet_ids = module.vpc.private_subnets

  eks_managed_node_groups = {
    ng1 = {
      instance_types = ["t3.medium"]
      desired_size   = 2
      min_size       = 1
      max_size       = 3
    }
  }

  tags = var.tags
}

# -----------------------------------------------------------------------------
# LOCALS FOR EKS ACCESS
# -----------------------------------------------------------------------------

locals {
  cluster_name     = module.eks.cluster_name
  cluster_endpoint = module.eks.cluster_endpoint
  cluster_ca       = base64decode(module.eks.cluster_certificate_authority_data)
}

# -----------------------------------------------------------------------------
# EKS PROVIDER CONFIGURATION FOR HELM + K8S (FIXED)
# -----------------------------------------------------------------------------

data "aws_eks_cluster_auth_token" "token" {
  name = local.cluster_name
}

provider "helm" {
  alias = "eks"

  kubernetes {
    host                   = local.cluster_endpoint
    cluster_ca_certificate = local.cluster_ca
    token                  = data.aws_eks_cluster_auth_token.token.token
  }
}

provider "kubernetes" {
  alias = "eks"

  host                   = local.cluster_endpoint
  cluster_ca_certificate = local.cluster_ca
  token                  = data.aws_eks_cluster_auth_token.token.token
}

# -----------------------------------------------------------------------------
# NGINX INGRESS CONTROLLER INSTALLATION
# -----------------------------------------------------------------------------

resource "helm_release" "nginx_ingress" {
  provider  = helm.eks
  name      = "nginx-ingress"
  namespace = "kube-system"
  repository = "https://kubernetes.github.io/ingress-nginx"
  chart      = "ingress-nginx"
  version    = "4.10.0"

  values = [
    yamlencode({
      controller = {
        replicaCount = 2
        service = {
          type = "LoadBalancer"
          annotations = {
            "service.beta.kubernetes.io/aws-load-balancer-type" = "nlb"
          }
        }
      }
    })
  ]

  depends_on = [module.eks]
}
